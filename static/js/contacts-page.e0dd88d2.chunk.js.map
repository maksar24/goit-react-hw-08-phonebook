{"version":3,"sources":["components/Form/Form.styles.js","components/Form/Form.js","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.js","components/Filter/Filter.styles.js","components/Filter/Filter.js","redux/contacts/contacts-selectors.js","views/ContactsView/ContactsView.js"],"names":["BlankPhonebook","styled","form","Label","label","Input","input","Button","button","Form","onSubmit","useState","name","setName","number","setNumber","handelChange","e","target","value","preventDefault","type","pattern","title","required","onChange","List","ul","Item","li","ContactList","options","onDelete","map","id","onClick","Filter","getSearchName","placeholder","defaultProps","getLoading","state","contacts","isLoading","getFilteredContacts","createSelector","entities","filter","normalizedFilter","toLowerCase","contact","includes","sort","a","b","nameA","toUpperCase","nameB","ContactsView","dispatch","useDispatch","useSelector","setFilter","useEffect","fetchContactsAction","newContact","el","alert","addContactAction","deleteContactAction"],"mappings":"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","file":"static/js/contacts-page.e0dd88d2.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const BlankPhonebook = styled.form`\r\n  border: 5px solid #21ce3b;\r\n  width: 400px;\r\n  margin: 0 auto;\r\n  padding: 25px 15px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border: 3px solid #48dca9;\r\n  border-radius: 5px;\r\n  width: 300px;\r\n  margin-left: 15px;\r\n  &:focus {\r\n    background-color: #47dca9;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border-color: aliceblue;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  background-color: #47dca9;\r\n  width: 95px;\r\n  &:focus {\r\n    border-color: #21ce3b;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { BlankPhonebook, Input, Button, Label } from \"./Form.styles\";\r\n\r\nexport const Form = ({ onSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handelChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newContact = {\r\n      name: name,\r\n      number: number,\r\n    };\r\n\r\n    onSubmit(newContact);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <BlankPhonebook onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handelChange}\r\n          value={name}\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handelChange}\r\n          value={number}\r\n        />\r\n      </Label>\r\n      <Button>Add contact</Button>\r\n    </BlankPhonebook>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border-color: aliceblue;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  background-color: #47dca9;\r\n  margin-left: 25px;\r\n  &:focus {\r\n    border-color: #21ce3b;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { List, Item, Button } from \"./ContactList.styles\";\r\n\r\nexport const ContactList = ({ options, onDelete }) => {\r\n  return (\r\n    <List>\r\n      {options.map(({ name, number, id }) => {\r\n        return (\r\n          <Item key={id}>\r\n            {name}: {number}\r\n            <Button onClick={() => onDelete(id)}>Delete</Button>\r\n          </Item>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.object),\r\n  onDelete: PropTypes.func,\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Input = styled.input`\r\n  border: 3px solid #48dca9;\r\n  border-radius: 5px;\r\n  width: 300px;\r\n  margin-left: 15px;\r\n  &:focus {\r\n    background-color: #47dca9;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input } from \"./Filter.styles\";\r\n\r\nexport const Filter = ({ type, label, getSearchName }) => {\r\n  return (\r\n    <>\r\n      <h3>Find contacts by name</h3>\r\n      <Input type={type} onChange={getSearchName} placeholder={label} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.defaultProps = {\r\n  type: \"text\",\r\n};\r\n\r\nFilter.propTypes = {\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.contacts.entities;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getLoading = (state) => state.contacts.isLoading;\r\nexport const getError = (state) => state.contacts.error;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const visibleContacts = contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n    const visibleContactsSortByName = visibleContacts.sort((a, b) => {\r\n      const nameA = a.name.toUpperCase();\r\n      const nameB = b.name.toUpperCase();\r\n\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    return visibleContactsSortByName;\r\n  }\r\n);\r\n","import { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Form } from \"../../components/Form/Form\";\r\nimport { ContactList } from \"../../components/ContactList/ContactList\";\r\nimport { Filter } from \"../../components/Filter/Filter\";\r\nimport { CustomLoader } from \"../../components/Loader/Loader\";\r\nimport {\r\n  getFilteredContacts,\r\n  getLoading,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\nimport {\r\n  fetchContactsAction,\r\n  deleteContactAction,\r\n  addContactAction,\r\n} from \"../../redux/contacts/contacts-operations(axios)\";\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const isLoading = useSelector(getLoading);\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContactsAction());\r\n  }, [dispatch]);\r\n\r\n  const deleteContact = (id) => dispatch(deleteContactAction(id));\r\n\r\n  const getSearchName = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  function addNewContact(newContact) {\r\n    const similarName = contacts.map((el) => el.name);\r\n\r\n    if (similarName.includes(newContact.name)) {\r\n      alert(`${newContact.name} is already in contacts`);\r\n    } else {\r\n      dispatch(addContactAction(newContact));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <Form onSubmit={addNewContact} />\r\n      <h2>Contacts</h2>\r\n      <Filter getSearchName={getSearchName} label=\"Enter contact name\" />\r\n      {isLoading && <CustomLoader />}\r\n      {contacts && <ContactList options={contacts} onDelete={deleteContact} />}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}